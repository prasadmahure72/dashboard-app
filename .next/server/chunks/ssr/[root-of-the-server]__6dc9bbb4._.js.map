{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n\nexport const authConfig = {\n    pages: {\n        signIn: '/login',\n    },\n    callbacks: {\n        authorized({ auth, request: { nextUrl } }) {\n            const isLoggedIn = !!auth?.user;\n            const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\n            if (isOnDashboard) {\n                if (isLoggedIn) return true;\n                return false; // Redirect unauthenticated users to login page\n            } else if (isLoggedIn) {\n                return Response.redirect(new URL('/dashboard', nextUrl));\n            }\n            return true;\n        },\n    },\n    providers: [], // Add providers with an empty array for now\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACtB,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACrC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACf,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YACjE,OAAO,IAAI,YAAY;gBACnB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACnD;YACA,OAAO;QACX;IACJ;IACA,WAAW,EAAE;AACjB","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport {authConfig} from './auth.config';\nimport {z} from 'zod';\nimport type {User} from '@/app/lib/definitions';\nimport bcrypt from 'bcrypt';\nimport postgres from 'postgres';\n\nconst sql = postgres(process.env.POSTGRES_URL!, {ssl: 'require'});\n\nasync function getUser(email: string): Promise<User | undefined> {\n    try {\n        const user = await sql<User[]>`SELECT *\n                                       FROM users\n                                       WHERE email = ${email}`;\n        return user[0];\n    } catch (error) {\n        console.error('Failed to fetch user:', error);\n        throw new Error('Failed to fetch user.');\n    }\n}\n\nexport const {auth, signIn, signOut} = NextAuth({\n    ...authConfig,\n    providers: [\n        Credentials({\n            async authorize(credentials) {\n                const parsedCredentials = z\n                    .object({email: z.string().email(), password: z.string().min(6)})\n                    .safeParse(credentials);\n\n                if (parsedCredentials.success) {\n                    const {email, password} = parsedCredentials.data;\n                    const user = await getUser(email);\n                    if (!user) return null;\n                    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n                    if (passwordsMatch) return user;\n                }\n                console.log('Invalid credentials');\n                return null;\n            },\n        }),\n    ],\n});"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAC,KAAK;AAAS;AAE/D,eAAe,QAAQ,KAAa;IAChC,IAAI;QACA,MAAM,OAAO,MAAM,GAAW,CAAC;;qDAEc,EAAE,MAAM,CAAC;QACtD,OAAO,IAAI,CAAC,EAAE;IAClB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IACpB;AACJ;AAEO,MAAM,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAC,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IAC5C,GAAG,8GAAA,CAAA,aAAU;IACb,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACR,MAAM,WAAU,WAAW;gBACvB,MAAM,oBAAoB,kKAAA,CAAA,IAAC,CACtB,MAAM,CAAC;oBAAC,OAAO,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAE,GAC9D,SAAS,CAAC;gBAEf,IAAI,kBAAkB,OAAO,EAAE;oBAC3B,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,kBAAkB,IAAI;oBAChD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAClB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEnE,IAAI,gBAAgB,OAAO;gBAC/B;gBACA,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;QACJ;KACH;AACL","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/lib/action.ts"],"sourcesContent":["'use server';\nimport {z} from 'zod';\nimport {revalidatePath} from \"next/cache\";\nimport {redirect} from \"next/navigation\";\nimport postgres from 'postgres';\nimport {signIn} from '@/auth';\nimport {AuthError} from 'next-auth';\n\nconst sql = postgres(process.env.POSTGRES_URL!, {ssl: 'require'});\n\nconst FormSchema = z.object({\n    id: z.string(),\n    customerId: z.string(),\n    amount: z.coerce.number(),\n    status: z.enum(['pending', 'paid']),\n    date: z.string(),\n});\n\nconst CreateInvoice = FormSchema.omit({id: true, date: true});\n\nexport async function createInvoice(formData: FormData) {\n    const {customerId, amount, status} = CreateInvoice.parse({\n        customerId: formData.get('customerId'),\n        amount: formData.get('amount'),\n        status: formData.get('status'),\n    });\n\n    const amountInCents = amount * 100;\n    const date = new Date().toISOString().split('T')[0];\n\n    try {\n        await sql`\n            INSERT INTO invoices (customer_id, amount, status, date)\n            VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n        `;\n    } catch (error) {\n        // We'll log the error to the console for now\n        console.error(error);\n    }\n\n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices');\n}\n\nconst UpdateInvoice = FormSchema.omit({id: true, date: true});\n\nexport async function updateInvoice(id: string, formData: FormData) {\n    const {customerId, amount, status} = UpdateInvoice.parse({\n        customerId: formData.get('customerId'),\n        amount: formData.get('amount'),\n        status: formData.get('status'),\n    });\n\n    const amountInCents = amount * 100;\n\n    try {\n        await sql`\n            UPDATE invoices\n            SET customer_id = ${customerId},\n                amount      = ${amountInCents},\n                status      = ${status}\n            WHERE id = ${id}\n        `;\n    } catch (error) {\n        // We'll log the error to the console for now\n        console.error(error);\n    }\n\n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices');\n}\n\nexport async function deleteInvoice(id: string) {\n    await sql`DELETE\n              FROM invoices\n              WHERE id = ${id}`;\n    revalidatePath('/dashboard/invoices');\n}\n\nexport async function authenticate(\n    prevState: string | undefined,\n    formData: FormData,\n) {\n    try {\n        await signIn('credentials', formData);\n    } catch (error) {\n        if (error instanceof AuthError) {\n            switch (error.type) {\n                case 'CredentialsSignin':\n                    return 'Invalid credentials.';\n                default:\n                    return 'Something went wrong.';\n            }\n        }\n        throw error;\n    }\n}"],"names":[],"mappings":";;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAC,KAAK;AAAS;AAE/D,MAAM,aAAa,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxB,IAAI,kKAAA,CAAA,IAAC,CAAC,MAAM;IACZ,YAAY,kKAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM;IACvB,QAAQ,kKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO;IAClC,MAAM,kKAAA,CAAA,IAAC,CAAC,MAAM;AAClB;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAC,IAAI;IAAM,MAAM;AAAI;AAEpD,eAAe,cAAc,QAAkB;IAClD,MAAM,EAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAC,GAAG,cAAc,KAAK,CAAC;QACrD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACzB;IAEA,MAAM,gBAAgB,SAAS;IAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEnD,IAAI;QACA,MAAM,GAAG,CAAC;;oBAEE,EAAE,WAAW,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;QAC/D,CAAC;IACL,EAAE,OAAO,OAAO;QACZ,6CAA6C;QAC7C,QAAQ,KAAK,CAAC;IAClB;IAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAC,IAAI;IAAM,MAAM;AAAI;AAEpD,eAAe,cAAc,EAAU,EAAE,QAAkB;IAC9D,MAAM,EAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAC,GAAG,cAAc,KAAK,CAAC;QACrD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACzB;IAEA,MAAM,gBAAgB,SAAS;IAE/B,IAAI;QACA,MAAM,GAAG,CAAC;;8BAEY,EAAE,WAAW;8BACb,EAAE,cAAc;8BAChB,EAAE,OAAO;uBAChB,EAAE,GAAG;QACpB,CAAC;IACL,EAAE,OAAO,OAAO;QACZ,6CAA6C;QAC7C,QAAQ,KAAK,CAAC;IAClB;IAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAEO,eAAe,cAAc,EAAU;IAC1C,MAAM,GAAG,CAAC;;yBAEW,EAAE,GAAG,CAAC;IAC3B,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;AACnB;AAEO,eAAe,aAClB,SAA6B,EAC7B,QAAkB;IAElB,IAAI;QACA,MAAM,CAAA,GAAA,oGAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAChC,EAAE,OAAO,OAAO;QACZ,IAAI,iBAAiB,wIAAA,CAAA,YAAS,EAAE;YAC5B,OAAQ,MAAM,IAAI;gBACd,KAAK;oBACD,OAAO;gBACX;oBACI,OAAO;YACf;QACJ;QACA,MAAM;IACV;AACJ;;;IA5EsB;IA0BA;IA0BA;IAOA;;AA3DA,+OAAA;AA0BA,+OAAA;AA0BA,+OAAA;AAOA,+OAAA","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/.next-internal/server/app/dashboard/invoices/create/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteInvoice as '4030808323da8168da5f1b71c530da5daa4dcd26ee'} from 'ACTIONS_MODULE0'\nexport {createInvoice as '40c2dcda3b6beb3bc8a60a506f2645a42a3090af13'} from 'ACTIONS_MODULE0'\nexport {authenticate as '605a4a9443d24fa92130bc5b46f6470545fddb5d83'} from 'ACTIONS_MODULE0'\nexport {updateInvoice as '60745cde0acef5e59aa842ee1d35591773e520cc3d'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/ui/button.tsx"],"sourcesContent":["import clsx from 'clsx';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\nexport function Button({ children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={clsx(\n        'flex h-10 items-center rounded-lg bg-blue-500 px-4 text-sm font-medium text-white transition-colors hover:bg-blue-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 active:bg-blue-600 aria-disabled:cursor-not-allowed aria-disabled:opacity-50',\n        className,\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAMO,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAmB;IAClE,qBACE,8OAAC;QACE,GAAG,IAAI;QACR,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,kTACA;kBAGD;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/ui/invoices/create-form.tsx"],"sourcesContent":["import {CustomerField} from '@/app/lib/definitions';\nimport Link from 'next/link';\nimport {\n    CheckIcon,\n    ClockIcon,\n    CurrencyDollarIcon,\n    UserCircleIcon,\n} from '@heroicons/react/24/outline';\nimport {Button} from '@/app/ui/button';\nimport {createInvoice} from \"@/app/lib/action\";\n\nexport default function Form({customers}: { customers: CustomerField[] }) {\n    return (\n        <>\n            <form action={createInvoice}>\n                <div className=\"rounded-md bg-gray-50 p-4 md:p-6\">\n                    {/* Customer Name */}\n                    <div className=\"mb-4\">\n                        <label htmlFor=\"customer\" className=\"mb-2 block text-sm font-medium\">\n                            Choose customer\n                        </label>\n                        <div className=\"relative\">\n                            <select\n                                id=\"customer\"\n                                name=\"customerId\"\n                                required\n                                className=\"peer block w-full cursor-pointer rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"\n                                defaultValue=\"\"\n                            >\n                                <option value=\"\" disabled>\n                                    Select a customer\n                                </option>\n                                {customers.map((customer) => (\n                                    <option key={customer.id} value={customer.id}>\n                                        {customer.name}\n                                    </option>\n                                ))}\n                            </select>\n                            <UserCircleIcon\n                                className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500\"/>\n                        </div>\n                    </div>\n\n                    {/* Invoice Amount */}\n                    <div className=\"mb-4\">\n                        <label htmlFor=\"amount\" className=\"mb-2 block text-sm font-medium\">\n                            Choose an amount\n                        </label>\n                        <div className=\"relative mt-2 rounded-md\">\n                            <div className=\"relative\">\n                                <input\n                                    id=\"amount\"\n                                    name=\"amount\"\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    required\n                                    placeholder=\"Enter USD amount\"\n                                    className=\"peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"\n                                />\n                                <CurrencyDollarIcon\n                                    className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\"/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Invoice Status */}\n                    <fieldset>\n                        <legend className=\"mb-2 block text-sm font-medium\">\n                            Set the invoice status\n                        </legend>\n                        <div className=\"rounded-md border border-gray-200 bg-white px-[14px] py-3\">\n                            <div className=\"flex gap-4\">\n                                <div className=\"flex items-center\">\n                                    <input\n                                        id=\"pending\"\n                                        name=\"status\"\n                                        type=\"radio\"\n                                        value=\"pending\"\n                                        required\n                                        className=\"h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2\"\n                                    />\n                                    <label\n                                        htmlFor=\"pending\"\n                                        className=\"ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-gray-100 px-3 py-1.5 text-xs font-medium text-gray-600\"\n                                    >\n                                        Pending <ClockIcon className=\"h-4 w-4\"/>\n                                    </label>\n                                </div>\n                                <div className=\"flex items-center\">\n                                    <input\n                                        id=\"paid\"\n                                        name=\"status\"\n                                        type=\"radio\"\n                                        value=\"paid\"\n                                        required\n                                        className=\"h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2\"\n                                    />\n                                    <label\n                                        htmlFor=\"paid\"\n                                        className=\"ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-green-500 px-3 py-1.5 text-xs font-medium text-white\"\n                                    >\n                                        Paid <CheckIcon className=\"h-4 w-4\"/>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n                <div className=\"mt-6 flex justify-end gap-4\">\n                    <Link\n                        href=\"/dashboard/invoices\"\n                        className=\"flex h-10 items-center rounded-lg bg-gray-100 px-4 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-200\"\n                    >\n                        Cancel\n                    </Link>\n                    <Button type=\"submit\">Create Invoice</Button>\n                </div>\n            </form>\n        </>\n\n    );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;AAEe,SAAS,KAAK,EAAC,SAAS,EAAiC;IACpE,qBACI;kBACI,cAAA,8OAAC;YAAK,QAAQ,oHAAA,CAAA,gBAAa;;8BACvB,8OAAC;oBAAI,WAAU;;sCAEX,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,SAAQ;oCAAW,WAAU;8CAAiC;;;;;;8CAGrE,8OAAC;oCAAI,WAAU;;sDACX,8OAAC;4CACG,IAAG;4CACH,MAAK;4CACL,QAAQ;4CACR,WAAU;4CACV,cAAa;;8DAEb,8OAAC;oDAAO,OAAM;oDAAG,QAAQ;8DAAC;;;;;;gDAGzB,UAAU,GAAG,CAAC,CAAC,yBACZ,8OAAC;wDAAyB,OAAO,SAAS,EAAE;kEACvC,SAAS,IAAI;uDADL,SAAS,EAAE;;;;;;;;;;;sDAKhC,8OAAC,2NAAA,CAAA,iBAAc;4CACX,WAAU;;;;;;;;;;;;;;;;;;sCAKtB,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,SAAQ;oCAAS,WAAU;8CAAiC;;;;;;8CAGnE,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC;wCAAI,WAAU;;0DACX,8OAAC;gDACG,IAAG;gDACH,MAAK;gDACL,MAAK;gDACL,MAAK;gDACL,QAAQ;gDACR,aAAY;gDACZ,WAAU;;;;;;0DAEd,8OAAC,mOAAA,CAAA,qBAAkB;gDACf,WAAU;;;;;;;;;;;;;;;;;;;;;;;sCAM1B,8OAAC;;8CACG,8OAAC;oCAAO,WAAU;8CAAiC;;;;;;8CAGnD,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC;wCAAI,WAAU;;0DACX,8OAAC;gDAAI,WAAU;;kEACX,8OAAC;wDACG,IAAG;wDACH,MAAK;wDACL,MAAK;wDACL,OAAM;wDACN,QAAQ;wDACR,WAAU;;;;;;kEAEd,8OAAC;wDACG,SAAQ;wDACR,WAAU;;4DACb;0EACW,8OAAC,iNAAA,CAAA,YAAS;gEAAC,WAAU;;;;;;;;;;;;;;;;;;0DAGrC,8OAAC;gDAAI,WAAU;;kEACX,8OAAC;wDACG,IAAG;wDACH,MAAK;wDACL,MAAK;wDACL,OAAM;wDACN,QAAQ;wDACR,WAAU;;;;;;kEAEd,8OAAC;wDACG,SAAQ;wDACR,WAAU;;4DACb;0EACQ,8OAAC,iNAAA,CAAA,YAAS;gEAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAOlD,8OAAC;oBAAI,WAAU;;sCACX,8OAAC,4JAAA,CAAA,UAAI;4BACD,MAAK;4BACL,WAAU;sCACb;;;;;;sCAGD,8OAAC,oHAAA,CAAA,SAAM;4BAAC,MAAK;sCAAS;;;;;;;;;;;;;;;;;;;AAM1C","debugId":null}},
    {"offset": {"line": 647, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\n\ninterface Breadcrumb {\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\nexport default function Breadcrumbs({\n  breadcrumbs,\n}: {\n  breadcrumbs: Breadcrumb[];\n}) {\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\n      <ol className={clsx(lusitana.className, 'flex text-xl md:text-2xl')}>\n        {breadcrumbs.map((breadcrumb, index) => (\n          <li\n            key={breadcrumb.href}\n            aria-current={breadcrumb.active}\n            className={clsx(\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\n            )}\n          >\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\n            {index < breadcrumbs.length - 1 ? (\n              <span className=\"mx-3 inline-block\">/</span>\n            ) : null}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,8OAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,8OAAC;YAAG,WAAW,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,8OAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,8OAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC","debugId":null}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 791, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nexport async function fetchRevenue() {\n  try {\n    // Artificially delay a response for demo purposes.\n    // Don't do this in production :)\n\n    // console.log('Fetching revenue data...');\n    // await new Promise((resolve) => setTimeout(resolve, 3000));\n\n    const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n    // console.log('Data fetch completed after 3 seconds.');\n\n    return data;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch revenue data.');\n  }\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    const data = await sql<LatestInvoiceRaw[]>`\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      ORDER BY invoices.date DESC\n      LIMIT 5`;\n\n    const latestInvoices = data.map((invoice) => ({\n      ...invoice,\n      amount: formatCurrency(invoice.amount),\n    }));\n    return latestInvoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch the latest invoices.');\n  }\n}\n\nexport async function fetchCardData() {\n  try {\n    // You can probably combine these into a single SQL query\n    // However, we are intentionally splitting them to demonstrate\n    // how to initialize multiple queries in parallel with JS.\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n    const invoiceStatusPromise = sql`SELECT\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n         FROM invoices`;\n\n    const data = await Promise.all([\n      invoiceCountPromise,\n      customerCountPromise,\n      invoiceStatusPromise,\n    ]);\n\n    const numberOfInvoices = Number(data[0][0].count ?? '0');\n    const numberOfCustomers = Number(data[1][0].count ?? '0');\n    const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n    const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n    return {\n      numberOfCustomers,\n      numberOfInvoices,\n      totalPaidInvoices,\n      totalPendingInvoices,\n    };\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch card data.');\n  }\n}\n\nconst ITEMS_PER_PAGE = 7;\nexport async function fetchFilteredInvoices(\n  query: string,\n  currentPage: number,\n) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n  try {\n    const invoices = await sql<InvoicesTable[]>`\n      SELECT\n        invoices.id,\n        invoices.amount,\n        invoices.date,\n        invoices.status,\n        customers.name,\n        customers.email,\n        customers.image_url\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      WHERE\n        customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`} OR\n        invoices.amount::text ILIKE ${`%${query}%`} OR\n        invoices.date::text ILIKE ${`%${query}%`} OR\n        invoices.status ILIKE ${`%${query}%`}\n      ORDER BY invoices.date DESC\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n    `;\n\n    return invoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n    const data = await sql`SELECT COUNT(*)\n    FROM invoices\n    JOIN customers ON invoices.customer_id = customers.id\n    WHERE\n      customers.name ILIKE ${`%${query}%`} OR\n      customers.email ILIKE ${`%${query}%`} OR\n      invoices.amount::text ILIKE ${`%${query}%`} OR\n      invoices.date::text ILIKE ${`%${query}%`} OR\n      invoices.status ILIKE ${`%${query}%`}\n  `;\n\n    const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n    return totalPages;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await sql<InvoiceForm[]>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const customers = await sql<CustomerField[]>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await sql<CustomersTableType[]>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 991, "column": 0}, "map": {"version":3,"sources":["file:///Users/prodesign/Desktop/Learn%20React/NextJS/nextjs-dashboard/dashboard-app/app/dashboard/invoices/create/page.tsx"],"sourcesContent":["import Form from \"@/app/ui/invoices/create-form\";\nimport Breadcrumbs from \"@/app/ui/invoices/breadcrumbs\";\nimport { fetchCustomers } from \"@/app/lib/data\";\n\nexport default async function Page() {\n  const customers = await fetchCustomers();\n  return (\n    <main>\n      <Breadcrumbs\n        breadcrumbs={[\n          { label: \"Invoices\", href: \"/dashboard/invoices\" },\n          {\n            label: \"Create Invoice\",\n            href: \"/dashboard/invoices/create\",\n            active: true,\n          },\n        ]}\n      />\n      <Form customers={customers} />\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD;IACrC,qBACE,8OAAC;;0BACC,8OAAC,qIAAA,CAAA,UAAW;gBACV,aAAa;oBACX;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBACE,OAAO;wBACP,MAAM;wBACN,QAAQ;oBACV;iBACD;;;;;;0BAEH,8OAAC,wIAAA,CAAA,UAAI;gBAAC,WAAW;;;;;;;;;;;;AAGvB","debugId":null}}]
}